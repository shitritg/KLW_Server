""" This class turns an output file from the Karma-lego algorithm to an index file that is used for searching
    the constructor gets a path to the file and a path to the desierable location of the index file.
    then the object creates the index file in that location"""
import Index
import traceback
import re

class KLOutputToSearchIndexFile:

    # Files variables
    _raw_data_file = None
    _output_search_file_path = None

    # Data variables
    _sym_list = None
    _start_with_sym_TIRP_dic = None
    _contains_sym_TIRP_dic = None
    _end_with_sym_TIRP_dic = None
    _vs_list = None
    _hs_list = None
    _vs_TIRPs_dic = None
    _hs_TIRPs_dic = None

    # _NUM_OF_ENTITIES = 2038
    _BLOCK_SIZE = 20
    _LINE_INDEX = 1

    # Raw data column indexing
    _TIRP_SIZE_INDEX = 0
    _TIRP_SYM_INDEX = 1
    _TIRP_REL_INDEX = 2
    _TIRP_M_DUR_INDEX = 3
    _TIRP_M_OFFSET_S_INDEX = 4
    _TIRP_M_OFFSET_E_INDEX = 5
    _TIRP_VS_INDEX = 6
    _TIRP_M_HS_INDEX = 7

    def __init__(self, input_file_path, output_file_path, num_of_entities, data_set_path, states, ids_counter):

        self._raw_data_file = open( input_file_path, 'r')

        self._output_search_file_path = output_file_path
        self._NUM_OF_ENTITIES = num_of_entities
        self._data_Set_Path = data_set_path

        self._sym_list = []
        self._start_with_sym_TIRP_dic = {}
        self._contains_sym_TIRP_dic = {}
        self._end_with_sym_TIRP_dic = {}
        self._vs_list = []
        self._hs_list = []
        self._vs_TIRPs_dic = {}
        self._hs_TIRPs_dic = {}
        self._ids_counter = ids_counter
        self.parse_file(states)

        # remove duplicates
        self._vs_list = list ( dict.fromkeys(self._vs_list) )
        self._hs_list = list( dict.fromkeys(self._hs_list) )
        # sort
        self._sym_list.sort( key = lambda sym: int(sym) )
        self._vs_list.sort( key = lambda sym: float(sym) )
        self._hs_list.sort( key = lambda sym: float(sym) )

        self.write_to_search_file()

        self._raw_data_file.close()




    """ This function gets all the relevant information to the data structure variabels """
    def parse_file (self, states):
        try:
            lines = self._raw_data_file.readlines()

            for i in range(1, len(lines), 2):
                if i== 419:
                    print("guy")
                splited_line = lines[i].split(" ")
                tirp_size = splited_line[0]
                tirp_symbols_lst = splited_line[self._TIRP_SYM_INDEX].split( "-" )[0:-1] #symbol list without empty char
                vs = round( (float(splited_line[self._TIRP_VS_INDEX]) / self._NUM_OF_ENTITIES) , 2 )
                m_hs = round( float(splited_line[self._TIRP_M_HS_INDEX]), 2 )
                ######################3
                # tirp = Index.find_Path_of_tirps(symbols=splited_line[self._TIRP_SYM_INDEX],rels=splited_line[self._TIRP_REL_INDEX], data_set_path=self._data_Set_Path,states=states)
                tirp = Index.find_Path_of_tirps(symbols=splited_line[self._TIRP_SYM_INDEX],rels=splited_line[self._TIRP_REL_INDEX], data_set_path=self._data_Set_Path,states=states)[-1]
                # if tirp is None:
                #     print("guy")
                mean_offset_from_first_symbol = re.sub(",", "|",str(tirp.get_mean_offset_from_first_symbol()))
                mean_offset_from_first_symbol_class_1 = re.sub(",", "|", str(tirp.get_mean_offset_from_first_symbol_class_1()))
                tirp_tup = ( splited_line[self._TIRP_SYM_INDEX] , splited_line[self._TIRP_REL_INDEX] , \
                              tirp.get_vs() ,tirp.get_mhs() ,tirp.get_tirp_size(),tirp.get_vs_class1() , tirp.get_mhs_class1(), tirp.get_mmd(), tirp.get_mmd_class1(),
                             tirp.get_mean_of_first_interval(), tirp.get_mean_of_first_interval_class_1(),mean_offset_from_first_symbol ,
                             mean_offset_from_first_symbol_class_1, tirp.get_p_value_mhs() ,tirp.get_p_value_md(), tirp.get_exist_in_class1(), tirp.get_exist_in_class_0(), self._ids_counter)

                self._ids_counter += 1

                self.add_new_symbols( tirp_symbols_lst )
                self.add_tirp_tup_to_dictionaries( tirp_symbols_lst , tirp_tup , tirp_size )

                self._vs_list.append( vs )
                self._hs_list.append( m_hs )

                self.add_to_dic( self._vs_TIRPs_dic , vs , tirp_tup )
                self.add_to_dic( self._hs_TIRPs_dic , m_hs , tirp_tup )
        except Exception as e:
            print(e)
            traceback.print_exc()
            self._raw_data_file.close()

    """ This function adds the symbols to the symbol list """
    def add_new_symbols( self , symbols_lst ):

        for sym in symbols_lst:
            if sym not in self._sym_list:
                self._sym_list.append( sym )

    """ This function adds the TIRP to the relevant dictionaries """
    def add_tirp_tup_to_dictionaries ( self , sym_lst , tirp_tup , tirp_size ):

        self.add_to_dic( self._start_with_sym_TIRP_dic, sym_lst[0], tirp_tup )
        self.add_to_dic (self._end_with_sym_TIRP_dic, sym_lst[-1], tirp_tup )

        if tirp_size == '1':
            self.add_to_contains_dic(sym_lst, tirp_tup)
        elif tirp_size != '2':
            self.add_to_contains_dic(sym_lst[1:-1], tirp_tup)

    """ This function adds a certain tuple that contains the TIRP information to the given dictionary """
    def add_to_dic( self , dic , key , tirp_tup ):

        if key in dic.keys():
            dic[key] += [tirp_tup]
        else:
            dic[key] = [tirp_tup]

    """ This function inserts a specific tirp to the dictionary for the contains tirps """
    def add_to_contains_dic( self , symbols_lst , tirp_tup ):

        for sym in symbols_lst:
            self.add_to_dic( self._contains_sym_TIRP_dic , sym , tirp_tup )

    """ This function writes all the data to the index output file """
    def write_to_search_file( self ):

        output_file = open ( self._output_search_file_path , 'w' )
        output_file = open( self._output_search_file_path , 'a')

        """ write the start, contains, end part of the index file """
        self.write_main_map_line( output_file )
        for sym in self._sym_list:
            self.write_inedxed_line( 's: ', self._start_with_sym_TIRP_dic , sym , output_file )
            self.write_inedxed_line( 'c: ', self._contains_sym_TIRP_dic , sym , output_file )
            self.write_inedxed_line( 'e: ', self._end_with_sym_TIRP_dic , sym , output_file )

        """ write the vertical support part of the file """
        self.write_vs_map_line( output_file )
        for vs in self._vs_list:
            self.write_inedxed_line( str( vs ) + ": " , self._vs_TIRPs_dic , vs , output_file )

        """ write the mean horizontal support part of the file """
        self.write_hs_map_line( output_file )
        for hs in self._hs_list:
            self.write_inedxed_line( str( hs ) + ": " , self._hs_TIRPs_dic , hs , output_file )

        output_file.close()

    """ This function create and write the first line of start, contains, end part.
        the line maps the rows of this part of the file """
    def write_main_map_line( self , output_file ):

        map_line = ""

        for sym in self._sym_list:
            map_line += sym + ":" + str( self._LINE_INDEX ) + " "
            self._LINE_INDEX = self.promote_line_index( sym , self._LINE_INDEX )

        """add HS & VS lines to map line"""
        map_line += "VS:" + str( self._LINE_INDEX )
        map_line += " HS:" + str( self._LINE_INDEX + len( self._vs_list ) + 1 )

        output_file.write(map_line + "\n")


    def promote_line_index( self , sym , index ):

        if sym in self._start_with_sym_TIRP_dic.keys():
            index += 1
        if sym in self._contains_sym_TIRP_dic.keys():
            index += 1
        if sym in self._end_with_sym_TIRP_dic.keys():
            index += 1

        return index

    """ This function create and write the first line of the vertiacal support part.
        the line maps the rows of this part of the file """
    def write_vs_map_line( self , file ):

        map_line = ""
        self._LINE_INDEX += 1

        for i in range(0 , 101 , 5):
            num_of_lines = sum(1 for j in self._vs_list if j < (i + 5) / 100 and j >= i / 100)
            if num_of_lines > 0:
                map_line += str(i) + ":" + str(self._LINE_INDEX) + " "
                self._LINE_INDEX += num_of_lines

        file.write( map_line[:-1] + "\n" )

    """ This function create and write the first line of the mean horizontal support part.
        the line maps the rows of this part of the file """
    def write_hs_map_line( self, file ):

        map_line = ""
        self._LINE_INDEX += 1

        for i in range( 0 , len ( self._hs_list ) , self._BLOCK_SIZE ):
            map_line += str( self._hs_list[i] ) + ":" + str( self._LINE_INDEX ) + " "
            self._LINE_INDEX += self._BLOCK_SIZE

        file.write( map_line[:-1] + "\n" )

    """ This function writes to the file all the lines except the map lines """
    def write_inedxed_line( self , start_str , dic , sym , file ):

        tirp_str = str(dic[sym])[1:-1].replace( "'" , "" ).replace( " " , "" ).replace( "),(" , ") (" )
        file.write( start_str + tirp_str + "\n")

    def get_ids_counter(self):
        return self._ids_counter


"""
 ***************************** Index File Format ***************************** 
 
Saved data for a certain tirp: (symbols, relation, vertical support, mean horizonral support)

First_line (map_line): the first line of the file is a map of the file in contains pairs of symbol and the relevent line.
format: sym_1:line_number_1 sym_2:line_number_2 sym_3:line_number_3 .... VS:line_number_vs HS:line_number_hs
example: 1:1 2:4 4:7 7:10 10:13 13:16 16:19 19:22 20:25 21:28 22:31 23:34 24:37 25:40 26:43 27:46 28:49 29:52 30:55 31:58 32:61 33:64 34:67 35:70 36:73 37:76 VS:79 HS:134
* VS - the line number of the start of the second section of the file
* HS - the line number of the start of the third section of the file

first section of the file: contains all the tirps that starts\contains\ends with a certain symbol.
the first line of the certain symbol is the line from the map line.
the algorithm creats a line onle if there is at least one relevant tirp
a line contains the discription of the relevant property (s-start\c-contain\e-ends) and all the relevant tirps.

example (for the above map line):
s: (1-,,1.0,2032.0) (1-4-,<.,0.22,3.34) (1-4-,o.,0.1,1.07) (1-10-,<.,0.41,3.44) (1-10-10-,<.<.<.,0.18,3.81) (1-10-32-,<.<.<.,0.11,2.44) (1-10-1-,<.<.<.,0.12,4.25) (1-10-24-,<.<.<.,0.1,1.97) (1-10-,o.,0.2,1.08) (1-10-,c.,0.17,1.64) (1-10-,s.,0.11,1.12) (1-7-,<.,0.18,3.1) (1-16-,<.,0.33,3.23) (1-16-16-,<.<.<.,0.12,3.83) (1-16-,o.,0.17,1.12) (1-16-,c.,0.14,1.45) (1-16-,s.,0.11,1.22) (1-28-,<.,0.46,2.22) (1-28-27-,<.<.m.,0.22,1.7) (1-28-23-,<.<.m.,0.1,1.49) (1-28-,o.,0.16,1.06) (1-28-,c.,0.17,1.28) (1-28-27-,c.o.m.,0.11,1.02) (1-32-,<.,0.56,2.64) (1-32-32-,<.<.<.,0.12,2.2) (1-32-1-,<.<.c.,0.14,2.54) (1-32-31-,<.<.m.,0.17,1.92) (1-32-33-,<.<.m.,0.11,1.97) (1-32-,o.,0.31,1.11) (1-32-32-,o.<.<.,0.11,1.24) (1-32-31-,o.<.m.,0.11,1.06) (1-32-,c.,0.21,1.39) (1-32-,s.,0.11,1.06) (1-36-,<.,0.35,1.77) (1-36-1-,<.<.c.,0.1,2.22) (1-36-,o.,0.2,1.07) (1-36-,s.,0.16,1.01) (1-36-1-,s.<.c.,0.11,1.92) (1-35-,<.,0.29,1.49) (1-35-,o.,0.19,1.01) (1-35-1-,o.<.c.,0.11,1.74) (1-35-,s.,0.16,1.0) (1-35-1-,s.<.c.,0.11,1.95) (1-20-,<.,0.4,2.33) (1-20-19-,<.<.m.,0.15,1.62) (1-20-,o.,0.21,1.09) (1-20-19-,o.<.m.,0.1,1.06) (1-20-,c.,0.15,1.21) (1-27-,<.,0.5,2.12) (1-27-28-,<.<.m.,0.15,1.65) (1-27-1-,<.<.c.,0.12,2.38) (1-27-,o.,0.33,1.09) (1-27-28-,o.<.m.,0.11,1.06) (1-27-1-,o.<.c.,0.14,1.55) (1-27-,c.,0.12,1.25) (1-27-,s.,0.11,1.03) (1-1-,<.,0.62,5.59) (1-1-4-,<.<.<.,0.1,4.24) (1-1-10-,<.<.<.,0.2,4.34) (1-1-16-,<.<.<.,0.16,4.1) (1-1-28-,<.<.<.,0.19,2.68) (1-1-32-,<.<.<.,0.26,2.89) (1-1-32-,<.<.o.,0.13,1.75) (1-1-36-,<.<.<.,0.11,2.35) (1-1-20-,<.<.<.,0.2,2.58) (1-1-27-,<.<.<.,0.19,2.49) (1-1-27-,<.<.o.,0.13,1.64) (1-1-1-,<.<.<.,0.38,6.66) (1-1-1-32-,<.<.<.<.<.<.,0.11,2.37) (1-1-1-1-,<.<.<.<.<.<.,0.19,5.79) (1-1-31-,<.<.<.,0.18,2.74) (1-1-19-,<.<.<.,0.15,2.25) (1-1-19-,<.<.o.,0.1,1.71) (1-1-13-,<.<.<.,0.19,4.09) (1-1-23-,<.<.<.,0.2,2.29) (1-1-23-,<.<.o.,0.13,1.63) (1-1-24-,<.<.<.,0.22,2.61) (1-1-24-,<.<.o.,0.11,1.7) (1-1-33-,<.<.<.,0.13,2.88) (1-1-25-,<.<.<.,0.15,2.66) (1-31-,<.,0.47,2.4) (1-31-32-,<.<.m.,0.22,1.76) (1-31-31-,<.<.<.,0.11,2.03) (1-31-30-,<.<.m.,0.11,1.62) (1-31-,o.,0.2,1.11) (1-31-32-,o.<.m.,0.12,1.07) (1-31-,c.,0.23,1.49) (1-31-32-,c.o.m.,0.12,1.04) (1-19-,<.,0.4,1.96) (1-19-20-,<.<.m.,0.13,1.55) (1-19-,o.,0.31,1.08) (1-19-20-,o.<.m.,0.11,1.1) (1-19-1-,o.<.c.,0.12,1.69) (1-19-,c.,0.12,1.22) (1-30-,<.,0.31,1.96) (1-30-31-,<.<.m.,0.11,1.68) (1-30-,c.,0.11,1.39) (1-37-,<.,0.26,2.14) (1-37-36-,<.<.m.,0.11,1.77) (1-37-,o.,0.11,1.11) (1-26-,<.,0.17,1.94) (1-29-,<.,0.22,2.02) (1-13-,<.,0.37,3.43) (1-13-27-,<.<.<.,0.1,1.95) (1-13-1-,<.<.<.,0.12,3.6) (1-13-13-,<.<.<.,0.16,3.61) (1-13-,o.,0.2,1.08) (1-13-,c.,0.14,1.64) (1-13-,s.,0.15,1.14) (1-13-,=.,0.11,1.4) (1-23-,<.,0.51,2.03) (1-23-27-,<.<.=.,0.17,1.72) (1-23-1-,<.<.c.,0.1,2.44) (1-23-24-,<.<.m.,0.15,1.58) (1-23-,o.,0.28,1.06) (1-23-24-,o.<.m.,0.11,1.06) (1-23-,c.,0.12,1.24) (1-24-,<.,0.52,2.26) (1-24-1-,<.<.c.,0.1,2.31) (1-24-23-,<.<.m.,0.18,1.64) (1-24-25-,<.<.m.,0.1,1.79) (1-24-,o.,0.23,1.08) (1-24-23-,o.<.m.,0.12,1.06) (1-24-,c.,0.17,1.26) (1-33-,<.,0.27,2.53) (1-33-32-,<.<.m.,0.14,2.05) (1-25-,<.,0.35,2.23) (1-25-28-,<.<.=.,0.14,1.85) (1-25-27-,<.<.m.,0.12,1.59) (1-25-24-,<.<.m.,0.12,1.74) (1-25-,c.,0.11,1.13) (1-21-,<.,0.15,2.32)
c: (10-1-10-,<.<.<.,0.12,4.17) (10-1-1-,<.<.<.,0.16,4.29) (10-1-1-,c.c.<.,0.11,3.36) (16-1-1-,<.<.<.,0.13,3.97) (28-1-1-,<.<.<.,0.14,2.76) (28-1-27-,c.m.<.,0.14,1.52) (32-1-32-,<.<.<.,0.13,1.98) (32-1-1-,<.<.<.,0.18,3.03) (32-1-1-,o.<.<.,0.11,1.65) (32-1-32-,c.<.<.,0.16,1.67) (32-1-1-,c.<.<.,0.1,2.63) (32-1-1-,c.c.<.,0.16,3.36) (32-1-31-,c.m.<.,0.12,1.46) (32-1-33-,c.m.<.,0.11,1.64) (36-1-10-,c.c.<.,0.2,3.23) (36-1-16-,c.c.<.,0.15,3.25) (36-1-28-,c.c.<.,0.18,2.2) (36-1-32-,c.f.<.,0.14,1.57) (36-1-32-,c.c.<.,0.18,2.51) (36-1-20-,c.f.<.,0.11,1.64) (36-1-20-,c.c.<.,0.14,2.07) (36-1-27-,c.f.<.,0.16,1.54) (36-1-27-,c.c.<.,0.12,2.06) (36-1-1-,c.c.<.,0.34,4.92) (36-1-1-1-,c.c.<.c.<.<.,0.2,5.9) (36-1-1-1-,c.c.<.c.<.<.,0.2,5.9) (36-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,4.63) (36-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,4.63) (36-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,4.63) (36-1-31-,c.c.<.,0.16,2.24) (36-1-19-,c.f.<.,0.11,1.45) (36-1-37-,c.m.<.,0.11,1.58) (36-1-13-,c.c.<.,0.19,3.45) (36-1-23-,c.f.<.,0.15,1.42) (36-1-23-,c.c.<.,0.13,1.94) (36-1-24-,c.f.<.,0.1,1.43) (36-1-24-,c.c.<.,0.19,2.24) (36-1-33-,c.c.<.,0.1,2.6) (36-1-25-,c.c.<.,0.14,2.29) (35-36-1-1-,=.c.c.c.c.<.,0.12,5.59) (35-1-4-,c.c.<.,0.12,3.29) (35-1-10-,c.c.<.,0.22,3.34) (35-1-10-,c.c.o.,0.1,1.07) (35-1-16-,c.c.<.,0.18,3.3) (35-1-28-,c.c.<.,0.21,2.2) (35-1-32-,c.f.<.,0.18,1.5) (35-1-32-,c.c.<.,0.22,2.62) (35-1-32-,c.c.o.,0.1,1.07) (35-1-20-,c.f.<.,0.13,1.56) (35-1-20-,c.c.<.,0.16,2.11) (35-1-27-,c.f.<.,0.19,1.52) (35-1-27-,c.c.<.,0.14,2.09) (35-1-1-,c.c.<.,0.38,5.01) (35-1-1-10-,c.c.<.c.<.<.,0.12,4.0) (35-1-1-10-,c.c.<.c.<.<.,0.12,4.0) (35-1-1-16-,c.c.<.c.<.<.,0.1,4.22) (35-1-1-16-,c.c.<.c.<.<.,0.1,4.22) (35-1-1-32-,c.c.<.c.<.<.,0.11,2.83) (35-1-1-32-,c.c.<.c.<.<.,0.11,2.83) (35-1-1-1-,c.c.<.c.<.<.,0.22,6.1) (35-1-1-1-,c.c.<.c.<.<.,0.22,6.1) (35-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,5.35) (35-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,5.35) (35-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,5.35) (35-1-1-13-,c.c.<.c.<.<.,0.11,3.94) (35-1-1-13-,c.c.<.c.<.<.,0.11,3.94) (35-1-1-24-,c.c.<.c.<.<.,0.11,2.75) (35-1-1-24-,c.c.<.c.<.<.,0.11,2.75) (35-1-31-,c.f.<.,0.1,1.32) (35-1-31-,c.c.<.,0.21,2.46) (35-1-31-,c.c.c.,0.1,1.44) (35-1-19-,c.f.<.,0.14,1.45) (35-1-19-,c.c.<.,0.12,1.94) (35-1-30-,c.c.<.,0.12,2.09) (35-1-13-,c.c.<.,0.21,3.37) (35-1-13-,c.c.o.,0.11,1.08) (35-1-23-,c.f.<.,0.19,1.48) (35-1-23-,c.c.<.,0.16,1.95) (35-1-24-,c.f.<.,0.11,1.31) (35-1-24-,c.c.<.,0.24,2.28) (35-1-24-,c.c.o.,0.1,1.08) (35-1-33-,c.c.<.,0.12,2.47) (35-1-25-,c.c.<.,0.16,2.32) (20-1-1-,<.<.<.,0.12,2.45) (20-1-1-,c.c.<.,0.1,3.25) (20-1-19-,c.m.<.,0.12,1.46) (27-1-1-,<.<.<.,0.1,2.47) (27-1-10-,c.c.<.,0.11,3.06) (27-1-28-,c.m.<.,0.15,1.51) (27-1-32-,c.c.<.,0.1,2.44) (27-1-1-,c.c.<.,0.21,4.0) (27-1-1-1-,c.c.<.c.<.<.,0.11,5.3) (27-1-1-1-,c.c.<.c.<.<.,0.11,5.3) (27-1-23-,c.f.<.,0.12,1.39) (1-,,1.0,2032.0) (1-1-4-,<.<.<.,0.1,4.24) (1-1-10-,<.<.<.,0.2,4.34) (1-1-16-,<.<.<.,0.16,4.1) (1-1-28-,<.<.<.,0.19,2.68) (1-1-32-,<.<.<.,0.26,2.89) (1-1-32-,<.<.o.,0.13,1.75) (1-1-36-,<.<.<.,0.11,2.35) (1-1-20-,<.<.<.,0.2,2.58) (1-1-27-,<.<.<.,0.19,2.49) (1-1-27-,<.<.o.,0.13,1.64) (1-1-1-,<.<.<.,0.38,6.66) (1-1-1-32-,<.<.<.<.<.<.,0.11,2.37) (1-1-1-32-,<.<.<.<.<.<.,0.11,2.37) (1-1-1-1-,<.<.<.<.<.<.,0.19,5.79) (1-1-1-1-,<.<.<.<.<.<.,0.19,5.79) (1-1-31-,<.<.<.,0.18,2.74) (1-1-19-,<.<.<.,0.15,2.25) (1-1-19-,<.<.o.,0.1,1.71) (1-1-13-,<.<.<.,0.19,4.09) (1-1-23-,<.<.<.,0.2,2.29) (1-1-23-,<.<.o.,0.13,1.63) (1-1-24-,<.<.<.,0.22,2.61) (1-1-24-,<.<.o.,0.11,1.7) (1-1-33-,<.<.<.,0.13,2.88) (1-1-25-,<.<.<.,0.15,2.66) (31-1-1-,<.<.<.,0.12,2.64) (19-1-20-,c.m.<.,0.12,1.61) (19-1-1-,c.c.<.,0.16,3.77) (37-1-36-,c.m.<.,0.1,1.44) (13-1-1-,<.<.<.,0.14,4.23) (13-1-13-,<.<.<.,0.1,3.72) (13-1-32-,c.<.<.,0.11,1.56) (13-1-1-,c.c.<.,0.11,3.16) (33-1-1-,<.<.<.,0.12,2.94)
e: (4-1-,<.,0.18,3.37) (4-1-,c.,0.19,1.9) (10-10-1-,<.<.<.,0.13,4.03) (10-1-,<.,0.32,3.5) (10-1-1-,<.<.<.,0.16,4.29) (10-1-,c.,0.27,1.91) (10-1-1-,c.c.<.,0.11,3.36) (7-1-,<.,0.14,3.18) (7-1-,c.,0.14,1.94) (16-1-,<.,0.27,3.19) (16-1-1-,<.<.<.,0.13,3.97) (16-1-,c.,0.22,1.95) (28-27-1-,m.<.c.,0.15,1.6) (28-1-,<.,0.29,2.27) (28-1-1-,<.<.<.,0.14,2.76) (28-1-,o.,0.17,1.06) (28-1-,c.,0.25,1.82) (32-35-1-,s.<.c.,0.1,1.79) (32-1-,<.,0.36,2.55) (32-1-1-,<.<.<.,0.18,3.03) (32-1-,m.,0.11,1.05) (32-1-,o.,0.25,1.07) (32-1-1-,o.<.<.,0.11,1.65) (32-1-,c.,0.35,2.06) (32-1-1-,c.<.<.,0.1,2.63) (32-1-1-,c.c.<.,0.16,3.36) (32-31-1-,m.<.<.,0.12,1.85) (36-10-1-,c.c.<.,0.14,3.16) (36-16-1-,c.c.<.,0.11,3.14) (36-28-1-,c.c.<.,0.11,2.06) (36-32-1-,c.c.<.,0.13,2.2) (36-1-,<.,0.12,2.11) (36-1-,c.,0.56,2.71) (36-1-1-,c.c.<.,0.34,4.92) (36-1-1-1-,c.c.<.c.<.<.,0.2,5.9) (36-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,4.63) (36-31-1-,c.c.<.,0.12,1.98) (36-13-1-,c.c.<.,0.14,3.29) (36-24-1-,c.c.<.,0.11,1.88) (35-10-1-,c.c.<.,0.16,3.38) (35-16-1-,c.c.<.,0.13,3.37) (35-28-1-,c.c.<.,0.13,2.07) (35-32-1-,c.c.<.,0.15,2.33) (35-32-1-,c.c.c.,0.11,1.71) (35-36-1-,=.c.c.,0.18,2.93) (35-36-1-1-,=.c.c.c.c.<.,0.12,5.59) (35-20-1-,c.c.<.,0.11,2.09) (35-1-,c.,0.6,2.7) (35-1-1-,c.c.<.,0.38,5.01) (35-1-1-1-,c.c.<.c.<.<.,0.22,6.1) (35-1-1-1-1-,c.c.<.c.<.<.c.<.<.<.,0.11,5.35) (35-31-1-,c.c.<.,0.16,2.27) (35-13-1-,c.c.<.,0.15,3.4) (35-13-1-,c.c.c.,0.11,1.73) (35-24-1-,c.c.<.,0.12,2.0) (35-25-1-,c.c.<.,0.1,2.01) (20-1-,<.,0.25,2.07) (20-1-1-,<.<.<.,0.12,2.45) (20-1-,o.,0.16,1.07) (20-1-,c.,0.23,2.01) (20-1-1-,c.c.<.,0.1,3.25) (20-19-1-,m.<.c.,0.11,1.6) (27-1-,<.,0.2,2.12) (27-1-1-,<.<.<.,0.1,2.47) (27-1-,o.,0.11,1.04) (27-1-,c.,0.42,2.24) (27-1-1-,c.c.<.,0.21,4.0) (27-1-1-1-,c.c.<.c.<.<.,0.11,5.3) (1-,,1.0,2032.0) (1-10-1-,<.<.<.,0.12,4.25) (1-32-1-,<.<.c.,0.14,2.54) (1-36-1-,<.<.c.,0.1,2.22) (1-36-1-,s.<.c.,0.11,1.92) (1-35-1-,o.<.c.,0.11,1.74) (1-35-1-,s.<.c.,0.11,1.95) (1-27-1-,<.<.c.,0.12,2.38) (1-27-1-,o.<.c.,0.14,1.55) (1-1-,<.,0.62,5.59) (1-1-1-,<.<.<.,0.38,6.66) (1-1-1-1-,<.<.<.<.<.<.,0.19,5.79) (1-19-1-,o.<.c.,0.12,1.69) (1-13-1-,<.<.<.,0.12,3.6) (1-23-1-,<.<.c.,0.1,2.44) (1-24-1-,<.<.c.,0.1,2.31) (31-32-1-,m.<.c.,0.11,1.46) (31-1-,<.,0.27,2.3) (31-1-1-,<.<.<.,0.12,2.64) (31-1-,o.,0.1,1.08) (31-1-,c.,0.16,1.63) (19-1-,<.,0.18,2.07) (19-1-,c.,0.3,2.19) (19-1-1-,c.c.<.,0.16,3.77) (30-1-,<.,0.12,2.23) (30-1-,c.,0.13,1.43) (37-36-1-,m.<.c.,0.12,1.72) (37-1-,<.,0.18,2.12) (37-1-,o.,0.11,1.06) (37-1-,c.,0.2,2.1) (29-1-,<.,0.18,2.21) (29-1-,o.,0.1,1.08) (29-1-,c.,0.13,1.81) (13-1-,<.,0.28,3.48) (13-1-1-,<.<.<.,0.14,4.23) (13-1-,c.,0.28,1.9) (13-1-1-,c.c.<.,0.11,3.16) (13-13-1-,<.<.<.,0.12,3.72) (23-1-,<.,0.11,1.89) (23-1-,c.,0.19,1.9) (24-1-,<.,0.18,2.01) (24-1-,o.,0.1,1.06) (24-1-,c.,0.17,1.75) (33-1-,<.,0.24,2.27) (33-1-1-,<.<.<.,0.12,2.94) (33-1-,o.,0.12,1.07) (33-1-,c.,0.14,2.1) (25-1-,<.,0.14,1.99) (21-1-,<.,0.11,2.07)
s: (2-,,0.12,246.0)
c: (2-,,0.12,246.0)
e: (2-,,0.12,246.0)
s: (4-,,0.45,907.0) (4-4-,<.,0.23,4.44) (4-4-4-,<.<.<.,0.12,5.44) (4-10-,<.,0.17,3.33) (4-16-,<.,0.13,2.75) (4-28-,<.,0.16,2.07) (4-28-,c.,0.11,1.43) (4-32-,<.,0.22,2.35) (4-32-,o.,0.14,1.08) (4-32-,c.,0.13,1.59) (4-36-,<.,0.13,1.79) (4-36-,o.,0.13,1.05) (4-35-,<.,0.1,1.64) (4-35-,o.,0.16,1.01) (4-20-,<.,0.14,1.93) (4-27-,<.,0.18,1.96) (4-27-,o.,0.18,1.06) (4-1-,<.,0.18,3.37) (4-1-,c.,0.19,1.9) (4-31-,<.,0.2,2.29) (4-31-,c.,0.13,1.51) (4-19-,<.,0.15,1.75) (4-19-,o.,0.15,1.05) (4-30-,<.,0.12,2.21) (4-37-,<.,0.12,2.1) (4-13-,<.,0.13,2.83) (4-13-,c.,0.1,1.82) (4-23-,<.,0.2,1.87) (4-23-,o.,0.14,1.06) (4-24-,<.,0.2,1.95) (4-24-,o.,0.1,1.07) (4-24-,c.,0.1,1.35) (4-25-,<.,0.12,1.96)
c: (4-,,0.45,907.0) (4-4-4-,<.<.<.,0.12,5.44) (35-4-4-,c.c.<.,0.13,3.64)
e: (4-,,0.45,907.0) (4-4-,<.,0.23,4.44) (4-4-4-,<.<.<.,0.12,5.44) (10-4-,<.,0.18,3.31) (16-4-,<.,0.14,2.39) (28-4-,<.,0.13,2.05) (32-4-,<.,0.16,2.19) (32-4-,c.,0.12,1.7) (36-4-,c.,0.21,2.07) (35-4-,c.,0.25,2.14) (35-4-4-,c.c.<.,0.13,3.64) (35-1-4-,c.c.<.,0.12,3.29) (27-4-,c.,0.18,2.0) (1-4-,<.,0.22,3.34) (1-4-,o.,0.1,1.07) (1-1-4-,<.<.<.,0.1,4.24) (31-4-,<.,0.13,2.28) (19-4-,c.,0.14,2.02) (13-4-,<.,0.13,2.85)
s: (7-,,0.37,745.0) (7-10-,<.,0.14,3.03) (7-7-,<.,0.18,3.86) (7-16-,<.,0.11,2.57) (7-28-,<.,0.14,2.01) (7-32-,<.,0.18,2.23) (7-32-,o.,0.11,1.14) (7-32-,c.,0.1,1.49) (7-36-,o.,0.1,1.07) (7-35-,o.,0.11,1.02) (7-20-,<.,0.12,1.88) (7-27-,<.,0.15,1.81) (7-27-,o.,0.13,1.08) (7-1-,<.,0.14,3.18) (7-1-,c.,0.14,1.94) (7-31-,<.,0.18,2.12) (7-19-,<.,0.13,1.7) (7-19-,o.,0.11,1.07) (7-30-,<.,0.11,2.04) (7-37-,<.,0.1,1.97) (7-13-,<.,0.11,2.54) (7-23-,<.,0.17,1.65) (7-24-,<.,0.15,1.95) (7-25-,<.,0.11,1.79)
c: (7-,,0.37,745.0)
.
.
.
.

second section of the file: build the same as the first section, the difference is the condition instead of property
the tirps is sorted by there vertical support.
the first line of the section is a map line for that section the values is divided to numbers that divisible by 5,
the map line contains a value only if there are tirps with the relevant values
map line format: value_1:line_num_1 value_2:line_num_2 value_3:line_num_3 ...

line example: 10:80 15:85 20:90 25:95 30:100 35:105 40:110 45:114 50:118 55:121 60:122 65:124 70:125 75:129 85:130 90:132 100:133
* there is no value of 80 that means there is no tirps with vs between 80 to 85
* the numbers in the file lines is between 0 to 1
file example (for the above map line):
.
.
.
0.6: (35-1-,c.,0.6,2.7) (20-,,0.6,1227.0)
0.62: (16-,,0.62,1268.0) (1-1-,<.,0.62,5.59)
0.68: (31-,,0.68,1389.0) (13-,,0.68,1380.0)
0.7: (19-,,0.7,1434.0)
0.71: (23-,,0.71,1450.0)
0.72: (10-,,0.72,1467.0)
0.74: (28-,,0.74,1503.0) (24-,,0.74,1503.0)
0.79: (32-,,0.79,1604.0)
0.88: (36-,,0.88,1793.0)
0.89: (35-,,0.89,1804.0)
0.9: (27-,,0.9,1825.0)
.
.
.


third section of the file: build the same as the first and second sections, the difference is the condition
the tirps is sorted by there mean horizontal support
the first line of the section is a map line for that section the values is divided to buckes of fixed size (self.__BLOCK_SIZE),
the map line contains the value of the mean horizontal support of the first tirp of the bucket and the line number
map line format: value_1:line_num_1 value_2:line_num_2 value_3:line_num_3 ...

line example: 1.0:135 1.2:155 1.4:175 1.6:195 1.8:215 2.0:235 2.2:255 2.41:275 2.69:295 3.14:315 3.43:335 3.86:355 4.75:375 907.0:395
file example (for the above map line):
1.0: (16-35-,o.,0.16,1.0) (32-35-31-,s.m.c.,0.1,1.0) (36-28-27-,c.f.m.,0.19,1.0) (36-20-,f.,0.18,1.0) (36-24-23-,c.f.m.,0.15,1.0) (36-25-,f.,0.11,1.0) (35-28-27-,c.f.m.,0.24,1.0) (35-36-,f.,0.19,1.0) (35-36-,=.,0.26,1.0) (35-36-27-,=.f.f.,0.12,1.0) (35-36-23-,=.f.f.,0.11,1.0) (35-20-,f.,0.21,1.0) (35-20-19-,c.f.m.,0.17,1.0) (35-27-,f.,0.39,1.0) (35-27-23-,f.f.f.,0.12,1.0) (35-27-28-27-,c.c.m.f.<.m.,0.13,1.0) (35-31-32-,c.f.m.,0.16,1.0) (35-19-,f.,0.3,1.0) (35-19-20-,c.f.m.,0.1,1.0) (35-37-36-,c.f.m.,0.12,1.0) (35-23-,f.,0.37,1.0) (35-23-27-,f.f.=.,0.13,1.0) (35-23-24-,c.f.m.,0.1,1.0) (35-23-24-23-,c.c.m.f.<.m.,0.11,1.0) (35-24-,f.,0.21,1.0) (35-24-23-,c.f.m.,0.2,1.0) (35-25-,f.,0.11,1.0) (35-25-27-,c.f.m.,0.12,1.0) (20-35-,s.,0.1,1.0) (27-35-,f.,0.11,1.0) (27-35-,s.,0.12,1.0) (27-35-,=.,0.11,1.0) (27-20-19-,c.f.m.,0.1,1.0) (1-35-,s.,0.16,1.0) (31-35-,s.,0.11,1.0)
1.01: (4-35-,o.,0.16,1.01) (28-36-,s.,0.19,1.01) (28-35-,s.,0.22,1.01) (32-35-,s.,0.21,1.01) (36-35-,f.,0.19,1.01) (36-35-,s.,0.11,1.01) (36-20-19-,c.f.m.,0.13,1.01) (36-31-32-,c.f.m.,0.12,1.01) (36-19-,f.,0.24,1.01) (36-30-,f.,0.1,1.01) (36-23-,f.,0.29,1.01) (36-23-27-,f.f.=.,0.11,1.01) (36-24-,f.,0.2,1.01) (35-28-,f.,0.16,1.01) (35-32-,f.,0.32,1.01) (35-31-,f.,0.2,1.01) (35-30-,f.,0.11,1.01) (27-36-,=.,0.1,1.01) (27-24-23-,c.f.m.,0.17,1.01) (1-36-,s.,0.16,1.01) (1-35-,o.,0.19,1.01) (29-36-,s.,0.15,1.01) (29-35-,s.,0.15,1.01) (13-35-,o.,0.17,1.01) (33-35-,s.,0.14,1.01)
1.02: (10-35-,o.,0.2,1.02) (7-35-,o.,0.11,1.02) (32-36-,s.,0.2,1.02) (32-35-,o.,0.11,1.02) (36-28-,f.,0.16,1.02) (36-32-,f.,0.26,1.02) (36-27-,f.,0.33,1.02) (35-37-,f.,0.13,1.02) (20-32-,s.,0.1,1.02) (20-36-,s.,0.11,1.02) (27-36-,s.,0.11,1.02) (27-20-,f.,0.14,1.02) (27-19-,f.,0.19,1.02) (1-28-27-,c.o.m.,0.11,1.02) (19-32-,f.,0.15,1.02) (19-27-,f.,0.17,1.02) (19-23-,f.,0.17,1.02) (19-24-,f.,0.13,1.02) (37-35-,s.,0.15,1.02) (33-36-,s.,0.13,1.02)
1.03: (10-28-27-,c.o.m.,0.1,1.03) (28-32-,s.,0.1,1.03) (32-36-,o.,0.1,1.03) (32-24-,f.,0.11,1.03) (27-36-,f.,0.1,1.03) (1-27-,s.,0.11,1.03) (31-36-,s.,0.1,1.03) (23-32-,f.,0.14,1.03)
1.04: (16-36-,o.,0.14,1.04) (16-23-,o.,0.16,1.04) (28-27-23-,m.<.f.,0.1,1.04) (32-20-,s.,0.1,1.04) (32-27-,o.,0.12,1.04) (32-27-,f.,0.11,1.04) (32-27-,s.,0.17,1.04) (32-23-,f.,0.12,1.04) (36-31-,f.,0.17,1.04) (27-32-,f.,0.22,1.04) (27-1-,o.,0.11,1.04) (27-23-,f.,0.35,1.04) (1-31-32-,c.o.m.,0.12,1.04) (19-31-,f.,0.17,1.04) (13-19-,o.,0.2,1.04) (23-31-,f.,0.11,1.04)
1.05: (4-36-,o.,0.13,1.05) (4-19-,o.,0.15,1.05) (10-16-,f.,0.1,1.05) (10-36-,o.,0.18,1.05) (10-24-,o.,0.16,1.05) (16-10-,f.,0.1,1.05) (32-1-,m.,0.11,1.05) (32-23-,o.,0.11,1.05) (20-32-,f.,0.11,1.05) (20-24-,m.,0.11,1.05) (27-31-,f.,0.17,1.05) (31-27-,s.,0.13,1.05) (29-28-27-,m.<.m.,0.12,1.05) (13-36-,o.,0.17,1.05) (23-27-,s.,0.12,1.05)
1.06: (4-27-,o.,0.18,1.06) (4-23-,o.,0.14,1.06) (10-19-,o.,0.22,1.06) (10-23-,o.,0.22,1.06) (16-27-,o.,0.21,1.06) (28-1-,o.,0.17,1.06) (32-10-,o.,0.12,1.06) (27-24-,f.,0.16,1.06) (1-28-,o.,0.16,1.06) (1-32-31-,o.<.m.,0.11,1.06) (1-32-,s.,0.11,1.06) (1-20-19-,o.<.m.,0.1,1.06) (1-27-28-,o.<.m.,0.11,1.06) (1-23-,o.,0.28,1.06) (1-23-24-,o.<.m.,0.11,1.06) (1-24-23-,o.<.m.,0.12,1.06) (31-19-,s.,0.15,1.06) (37-1-,o.,0.11,1.06) (29-13-,o.,0.11,1.06) (13-27-28-,o.<.m.,0.1,1.06) (13-31-,o.,0.12,1.06) (13-24-,o.,0.16,1.06) (24-1-,o.,0.1,1.06)
1.07: (4-24-,o.,0.1,1.07) (10-20-,o.,0.11,1.07) (7-36-,o.,0.1,1.07) (7-19-,o.,0.11,1.07) (16-19-,o.,0.18,1.07) (16-24-,o.,0.13,1.07) (28-19-,m.,0.11,1.07) (28-25-,f.,0.12,1.07) (32-16-,o.,0.11,1.07) (32-20-,f.,0.15,1.07) (32-1-,o.,0.25,1.07) (32-13-,o.,0.12,1.07) (35-1-10-,c.c.o.,0.1,1.07) (35-1-32-,c.c.o.,0.1,1.07) (20-1-,o.,0.16,1.07) (1-4-,o.,0.1,1.07) (1-36-,o.,0.2,1.07) (1-31-32-,o.<.m.,0.12,1.07) (31-27-,m.,0.12,1.07) (19-32-,m.,0.12,1.07) (13-20-,o.,0.14,1.07) (33-1-,o.,0.12,1.07) (33-19-,m.,0.11,1.07)
1.08: (4-32-,o.,0.14,1.08) (10-28-,o.,0.12,1.08) (10-27-,o.,0.26,1.08) (7-27-,o.,0.13,1.08) (28-13-,o.,0.12,1.08) (32-28-,m.,0.15,1.08) (35-1-13-,c.c.o.,0.11,1.08) (35-1-24-,c.c.o.,0.1,1.08) (20-27-,m.,0.1,1.08) (27-32-,m.,0.12,1.08) (1-10-,o.,0.2,1.08) (1-19-,o.,0.31,1.08) (1-13-,o.,0.2,1.08) (1-24-,o.,0.23,1.08) (31-20-,m.,0.11,1.08) (31-1-,o.,0.1,1.08) (29-1-,o.,0.1,1.08) (13-10-,s.,0.13,1.08) (13-16-,o.,0.13,1.08) (13-23-,o.,0.27,1.08) (24-31-,m.,0.12,1.08) (33-32-31-,m.<.m.,0.1,1.08)
1.09: (10-37-,o.,0.13,1.09) (16-20-,o.,0.12,1.09) (32-19-,o.,0.11,1.09) (20-23-,m.,0.1,1.09) (1-20-,o.,0.21,1.09) (1-27-,o.,0.33,1.09) (29-23-,m.,0.11,1.09) (25-23-,m.,0.16,1.09)
1.1: (10-13-,s.,0.11,1.1) (20-31-,m.,0.14,1.1) (1-19-20-,o.<.m.,0.11,1.1) (13-10-,o.,0.16,1.1) (13-27-,o.,0.33,1.1) (33-31-,m.,0.12,1.1)
1.11: (16-31-,o.,0.12,1.11) (16-37-,o.,0.1,1.11) (32-27-,m.,0.17,1.11) (1-32-,o.,0.31,1.11) (1-31-,o.,0.2,1.11) (1-37-,o.,0.11,1.11) (31-28-,m.,0.12,1.11) (31-23-,m.,0.12,1.11) (24-32-,m.,0.13,1.11) (33-20-,m.,0.14,1.11) (33-27-,m.,0.12,1.11)
1.12: (10-32-,o.,0.19,1.12) (28-32-,m.,0.15,1.12) (28-31-,m.,0.15,1.12) (32-23-,m.,0.16,1.12) (32-24-,m.,0.16,1.12) (35-24-27-,c.f.<.,0.11,1.12) (20-32-,=.,0.14,1.12) (27-29-,m.,0.1,1.12) (1-10-,s.,0.11,1.12) (1-16-,o.,0.17,1.12) (31-24-,m.,0.13,1.12) (13-28-,o.,0.11,1.12) (13-32-,o.,0.21,1.12)
1.13: (10-31-,o.,0.15,1.13) (28-20-,m.,0.12,1.13) (28-23-24-,m.<.m.,0.11,1.13) (32-19-,m.,0.19,1.13) (1-25-,c.,0.11,1.13)
1.14: (7-32-,o.,0.11,1.14) (16-32-,o.,0.16,1.14) (36-27-27-,c.f.<.,0.12,1.14) (35-32-23-,c.f.<.,0.11,1.14) (27-24-,m.,0.14,1.14) (1-13-,s.,0.15,1.14) (23-28-27-,m.<.m.,0.1,1.14) (24-25-27-,m.<.m.,0.12,1.14)
1.15: (35-27-27-,c.f.<.,0.15,1.15) (35-23-23-,c.f.<.,0.14,1.15) (23-28-,m.,0.15,1.15) (24-27-,m.,0.14,1.15) (25-28-27-,=.m.m.,0.14,1.15)
1.16: (28-26-,m.,0.1,1.16) (24-28-,=.,0.12,1.16)
.
.
.

"""
